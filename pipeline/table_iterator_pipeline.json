{
	"name": "table_iterator_pipeline",
	"properties": {
		"activities": [
			{
				"name": "TableIngestion",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetTableList",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetTableList').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "SwitchADFPipelineType",
							"description": "This activity switches between different types of adf pipelines like 'DWH' which is the default and other pipeline types so we can switch between different execution pielines in our ADF",
							"type": "Switch",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@item().adf_pipeline_type",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "NRT",
										"activities": [
											{
												"name": "ExecutePipelineNRT",
												"description": "This activity is the superset activity to execute the NRT pipeline as it is different from the full pipeline type or 'DWH' one.",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "rt_source_to_shield_pipeline",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"table_name": {
															"value": "@item().table_name",
															"type": "Expression"
														},
														"source": {
															"value": "@item().source_name",
															"type": "Expression"
														},
														"Initialize_full_load": true,
														"testing": {
															"value": "@item().testing_flg",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								],
								"defaultActivities": [
									{
										"name": "Execute full pipeline",
										"type": "ExecutePipeline",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "full_pipeline",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"table_name": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"source": {
													"value": "@item().source_name",
													"type": "Expression"
												},
												"testing": {
													"value": "@item().testing_flg",
													"type": "Expression"
												},
												"iterator_run_id": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												}
											}
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "GetTableList",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[dbo].[GetTableList]",
						"storedProcedureParameters": {
							"TriggerName": {
								"type": "String",
								"value": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Metastore_tablelist",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "CheckExecutionStatus",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "TableIngestion",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT COUNT(*) AS failed_runs FROM [dbo].[pipeline_log] pl\nJOIN dbo.table_list tl \nON pl.table_name = tl.table_name \nWHERE tl.source_id IN (1, 6, 8)\nAND pl.EXECUTION_STATUS='Failed'\nAND run_id='@{pipeline().RunId}'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Metastore",
						"type": "DatasetReference",
						"parameters": {
							"table_name": "''"
						}
					}
				}
			},
			{
				"name": "If Condition1",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "CheckExecutionStatus",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(int(activity('CheckExecutionStatus').output.firstRow.failed_runs), 0)\n",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Notebook1",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": {
									"value": "@concat(if(equals(pipeline().globalParameters.environment,'dev'),'/Repos/caelum/lowell.caelum.cdp.databricks/','/caelum/'),'main_triggered_after_data_ingestion')\n",
									"type": "Expression"
								}
							},
							"linkedServiceName": {
								"referenceName": "databricks_cs",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			}
		],
		"variables": {
			"table_name": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Caelum_Pipelines/end_to_end"
		},
		"annotations": [],
		"lastPublishTime": "2021-06-10T20:05:42Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}